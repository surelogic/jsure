# $Header: /cvs/fluid/fluid/ops/edu/cmu/cs/fluid/java/operator/ConstructorDeclaration.op,v 1.17 2007/05/07 15:20:30 chance Exp $
public operator ConstructorDeclaration extends SomeFunctionDeclaration 
    implements FlowUnit, edu.cmu.cs.fluid.java.promise.IHasReceiverDecl
{
  syntax {
    annos:Annotations
    $modifiers:Modifiers(public,protected,private,native,strictfp) 
    types:TypeFormals $id:Info params:Parameters
    exceptions:Throws
    body:OptMethodBody
  }
  properties {
    binding=Constructor
  }

  @Override
  public com.surelogic.common.ref.IDecl.Kind getKind() {
    return com.surelogic.common.ref.IDecl.Kind.CONSTRUCTOR;
  }

  @Override public Component createComponent(IRNode node) {
    Component comp = new Component(node,1,1,0);
    ControlEdge.connect(comp.getEntryPort(),comp.getNormalExitPort());

    Subcomponent sub = new Subcomponent(comp,tree.childLocation(node,bodyLoc),1,1,1);
    ControlNode startNode = new ComponentSource(comp,null);
    ControlNode returnNode = new ComponentSink(comp,Boolean.TRUE);
    ControlNode abruptNode = new ComponentSink(comp,Boolean.FALSE);

    ControlEdge.connect(startNode,sub.getEntryPort());
    ControlEdge.connect(sub.getNormalExitPort(),returnNode);
    ControlEdge.connect(sub.getAbruptExitPort(),abruptNode);
    return comp;
  }

  public Source getSource(IRNode node, JavaComponentFactory f) {
    Component comp = f.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentEntryPort)sub.getEntryPort()).getInput();
    return (Source)e.getSource();
  }
  public Sink getNormalSink(IRNode node, JavaComponentFactory f) {
    Component comp = f.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentNormalExitPort)sub.getNormalExitPort()).getOutput();
    return (Sink)(e.getSink());
  }
  public Sink getAbruptSink(IRNode node, JavaComponentFactory f) {
    Component comp = f.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentAbruptExitPort)sub.getAbruptExitPort()).getOutput();
    return (Sink)(e.getSink());
  }
}
