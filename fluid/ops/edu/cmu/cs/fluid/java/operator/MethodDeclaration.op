# $Header: /cvs/fluid/fluid/ops/edu/cmu/cs/fluid/java/operator/MethodDeclaration.op,v 1.19 2006/08/23 08:57:07 boyland Exp $
public operator MethodDeclaration extends SomeFunctionDeclaration 
    implements FlowUnit, DripOperator
{
  syntax {
    annos:Annotations  
    $modifiers:Modifiers(public,protected,private,abstract,final,static,native)
    types:TypeFormals returnType:ReturnType 
    $id:Info <> params:Parameters $dims:DimInfo
    exceptions:Throws
    body:OptMethodBody
  }
  properties {
    dims="Already_taken_into_account_by_the_resolved_type_binding"
    bindsToType=Type
    binding=Method 
  }
  
  @Override
  public com.surelogic.common.ref.IDecl.Kind getKind() {
    return com.surelogic.common.ref.IDecl.Kind.METHOD;
  }  
  
  @Override public Component createComponent(IRNode node) {
    Component comp = new Component(node,1,1,0);
    ControlEdge.connect(comp.getEntryPort(),comp.getNormalExitPort());

    Subcomponent sub = new Subcomponent(comp,tree.childLocation(node,bodyLoc),1,1,1);
    ControlNode startNode = new ComponentSource(comp,null);
    ControlNode returnNode = new ComponentSink(comp,Boolean.TRUE);
    ControlNode abruptNode = new ComponentSink(comp,Boolean.FALSE);

    ControlEdge.connect(startNode,sub.getEntryPort());
    ControlEdge.connect(sub.getNormalExitPort(),returnNode);
    ControlEdge.connect(sub.getAbruptExitPort(),abruptNode);
    return comp;
  }

  public Source getSource(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentEntryPort)sub.getEntryPort()).getInput();
    return (Source)e.getSource();
  }
  public Sink getNormalSink(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentNormalExitPort)sub.getNormalExitPort()).getOutput();
    return (Sink)(e.getSink());
  }
  public Sink getAbruptSink(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentAbruptExitPort)sub.getAbruptExitPort()).getOutput();
    return (Sink)(e.getSink());
  }
}
