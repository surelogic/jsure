This is Doug Lea's util.concurrent.  It is the predecessor to the
JSR-166 libraries.

We start with many classes assured, and a few remaining inconsistencies.

Concurrency results have 4 unassured locks, and 2 unassured singleThreaded
constructors:

- Lock CyclicBarrier.Lock
- Lock LinkedQueue.TakeLock
- Lock Slot.ItemLock
- Lock SynchronizedVariable.VarLock

- singleThreaded CyclicBarrier.CyclicBarrier(int,Runnable)
- singleThreaded CyclicBarrier.CyclicBarrier(int)

(The unassured singleThreaded constructors are causing the
assurnance failure of CyclicBarrier.Lock)

Effects have 1 unassured method
- (first one) "Reads nothing writes nothing on CyclicBarrier.CyclicBarrier(int)"

Scoped promises have 2 unassured issues
- promise "borrowed this" for new() on Slot
- promise "singleThreaded" for new() on Slot 

Thread effects have 1 unsassured method
- (first one) "starts nothing on CyclicBarrier.CyclicBarrier(int)"

Uniqueness
- Other control flow for Slot.Slot(Class)

[All the issues on CyclicBarrier are related, and will be dealt with later]
[All the issues on Slot are related, and will be dealt with later]


------------------------------------------------------------------------------
First scenario: Race condition in SynchronizedLong
------------------------------------------------------------------------------

We look first at SynchronizedVariable.VarLock.

- Double-click on the node for "SynchronizedVariable.VarLock" to go to its
  declaration site.
  + POINT: The lock is declared to protect the region "Variable" in the class
    SynchronizedVariable.  But this class does not yet populate region with any
    fields.

- Drill into the "1 unprotected field access"
  + double click on the use to go to line 102 of *SynchronizedLong*
    (does *not* go to code in SynchronizedVariable)
    + The line is "return value_"

- ctrl-click on "value_" to go to it's declaration
  + POINT: Field is mapped into region Variable, and thus must be accessed
    within a synchronized block.

- Returning to line 102, the statement is not within a synchronized block.  
  This is a real error.  This can cause corruption because longs are 64-bit 
  values, and java does not treat 64-bit values atomically.

- Fix is to rewrite the method to be like SynchronizedDouble: See line 92 of 
  SynchronizedDouble.java.  
  
  + [Simple way to get to SynchronizedDouble: CTRL+SHIFT+T to "open type"]
  
  + NOTE 1: Lock analysis does nothing for assuring SynchronizedDouble.swap()
    because the method does not make any direct use of the Variable region!
    This is where we could benefit from some kind of atomicity analysis.  
    
  + NOTE 2: Lock ordering problem.  Even if we assigned a static lock order to
    the locks, which we could do via annotations, we do not solve the lock
    ordering problem, because we have to deal with ordering of the same lock in
    different object instances.  Here Doug imposes an order using the
    identityHashCode method.


------------------------------------------------------------------------------
Second scenario: Incomplete modeling of CyclicBarrier
------------------------------------------------------------------------------

CyclicBarrier Issues 

- If you drill into the CyclicBarrier.Lock issues, you will see that the
  problem is that we are unable to assure that the constructor
  "CyclicBarrier(int, Runnable)" is @singleThreaded.
  
  + We have declared it @singleThreaded, but we do not have a "@borrowed this" 
    on the method.  We could add one, but instead, let's try the other approach
    to assuring @singleThreaded: Assure that the method only writes to the
    new object,  and that it doesn't start any threads.
      1) Add "@writes nothing"
         ("nothing" because we do not need to declare effects on the new object)
      2) Add "@starts nothing"
         (We don't start any threads)
    
    Rationale for this:   
      
      If the constructor does not write to other objects, then it does make 
      itself known to already running threads.  If the constructor doesn't
      start new threads, it doesn't make itself known to any new threads.
      
    [The other assurance failures are because the assurance for the constructor
    CyclicBarrier(int) fails because it needs to know the effects and thread
    effects of CyclicBarrier(int, Runnable), but we haven't yet provided them.]
     
  + We *still* fail to assure: we need to know the effects/thread effects of 
    the constructor for IllegalArgumentException.
    
      - Look at the red X's under the pre-conditions, to find that the problem
        is the IllegalArgumentException constructor
        
        - Default effects for constructor: Writes everything!
        - Doesn't promise to not start a thread
        
    What to do?  This is a library class, and we cannot easily annotate it.
    We will *assume* it's annotations, and come back to them at a later point:
    
      - If your Eclipse is set up right, you can even eye-ball the constructor
        by CTRL-clicking on it.  Can see that these are reasonable assumptions
        to make:

      1) @assume "@starts nothing" for java.lang:IllegalArgumentException:new()
      2) @assume "@writes nothing" for java.lang:IllegalArgumentException:new()

   + Now we're assured.
   
   + (Can show off thread effect analysis by uncommenting thread start.)

------------------------------------------------------------------------------
Third scenario: Incomplete modeling of SemaphoreControllerChannel
------------------------------------------------------------------------------

If you drill into any of the problems with Slot.Slot(Class), you will find
that it really complains about the call to the super-constructor in 
SemaphoreControlledChannel.  You can fix this by uncommenting the annotations
on the second of the two constructors there.

------------------------------------------------------------------------------
Fourth scenario: Tool limitation
------------------------------------------------------------------------------

Look at LinkedQueue.TakeLock
- There are four unprotected accesses to _head.  These are actually correct.  The 
  lock TakeLock is only needed for the extract() method which changes the value of _head.
  The correctness of this is based on various memory model effects.
