# $Header: /cvs/fluid/opgen/ops/demo/ClassDeclaration.op,v 1.2 2006/05/19 15:41:01 chance Exp $
public operator ClassDeclaration extends TypeDeclaration implements DripOperator, FlowUnit 
{
  syntax {
    $mods:Modifiers "class" $id:Info types:TypeFormals <?> "extends" extension:Type </?>
        impls:Implements
    body:ClassBody
  }

  public static Component createTypeDeclComponent(IRNode node, int bodyNum, boolean nested) {
    Component comp = new Component(node,nested?1:0, nested?1:0 ,0);
    if (nested) {
      // don't do anything, go immediately to exit.
      ControlEdge.connect(comp.getEntryPort(),comp.getNormalExitPort());
    } else {
      // execution will never get here anyway (at least it shouldn't)
    }

    /* the class body executes the static initializer */
    Subcomponent sub = new Subcomponent(comp,tree.childLocation(node,bodyNum),1,1,1);
    ControlNode startNode = new ComponentSource(comp,null);
    ControlNode endNode = new ComponentSink(comp,Boolean.TRUE);
    ControlNode abruptNode = new ComponentSink(comp,Boolean.FALSE);

    ControlEdge.connect(startNode,sub.getEntryPort());
    ControlEdge.connect(sub.getNormalExitPort(),endNode);
    ControlEdge.connect(sub.getAbruptExitPort(),abruptNode);

    return comp;
  }
  
  @Override public Component createComponent(IRNode node) {
    return createTypeDeclComponent(node,3,false);
  }

  public Source getSource(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,3));
    ControlEdge e = ((SubcomponentEntryPort)sub.getEntryPort()).getInput();
    return (Source)e.getSource();
  }
  public Sink getNormalSink(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,3));
    ControlEdge e = ((SubcomponentNormalExitPort)sub.getNormalExitPort()).getOutput();
    return (Sink)e.getSink();
  }
  public Sink getAbruptSink(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,3));
    ControlEdge e = ((SubcomponentAbruptExitPort)sub.getAbruptExitPort()).getOutput();
    return (Sink)e.getSink();
  }
  
  public Operator getResultOp() {
    return ClassDeclaration.prototype;
  }
}
