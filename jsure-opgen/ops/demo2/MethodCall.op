# $Header: /cvs/fluid/opgen/ops/demo2/MethodCall.op,v 1.1 2006/05/04 18:32:57 chance Exp $
public operator MethodCall extends PrimaryExpression
    implements Call, DripOperator
{
  syntax {
    object:Expression <> "." <> $method:Info @args:Arguments
  }
  // NB: for backward compatability we put in only the common part of the syntax
  
  public static IRNode getArgs(IRNode node) {
    Operator op = tree.getOperator(node);
    if (!(op instanceof MethodCall)) {
      throw new IllegalArgumentException("node not MethodCall: "+op);
    }
    return ((MethodCall)op).getActuals(node);
  }

  // NB: There is no setArgs: anyone editing the tree
  // should know what kind of node this is (I think) (JTB)
  
  public Operator getResultOp() {
    return MethodDeclaration.prototype;
  }
  
  public IRNode getActuals(IRNode node) {
    throw new IllegalArgumentException("this is an abstract node, no actuals");
  }
  
  public final Component createComponent(IRNode node, int argLoc) {
    Component comp = new Component(node,1,1,1);
    Subcomponent subobj = 
      new Subcomponent(comp,tree.childLocation(node,0),1,1,1);
    Subcomponent subarg = 
      new Subcomponent(comp,tree.childLocation(node,argLoc),1,1,1);
    ControlNode abruptMerge1 = new Merge();
    ControlNode abruptMerge2 = new Merge();
    ControlNode abruptMerge3 = new Merge();
    ControlNode throwNull = 
      new AddLabel(PrimitiveExceptionLabel.primitiveNullPointerException);
    ControlNode testOK = new ComponentChoice(comp,null);
    ControlNode doCall = new ComponentChoice(comp,prototype);
    ControlNode propagateExceptions = new AddLabel(ExceptionLabel.prototype);
    // new AddLabel(new CallExceptionLabel(node));

    ControlEdge.connect(comp.getEntryPort(),subobj.getEntryPort());
    ControlEdge.connect(subobj.getAbruptExitPort(),abruptMerge1);
    ControlEdge.connect(subobj.getNormalExitPort(),subarg.getEntryPort());
    ControlEdge.connect(subarg.getAbruptExitPort(),abruptMerge1);
    ControlEdge.connect(subarg.getNormalExitPort(),testOK);
    ControlEdge.connect(testOK,doCall);
    ControlEdge.connect(doCall,comp.getNormalExitPort());

    ControlEdge.connect(testOK,throwNull);
    ControlEdge.connect(throwNull,abruptMerge2);
    ControlEdge.connect(doCall,propagateExceptions);
    ControlEdge.connect(propagateExceptions,abruptMerge2);
    ControlEdge.connect(abruptMerge1,abruptMerge3);
    ControlEdge.connect(abruptMerge2,abruptMerge3);
    ControlEdge.connect(abruptMerge3,comp.getAbruptExitPort());
    return comp;
  }
  
}
