package com.surelogic.annotation.scrub;

import java.text.MessageFormat;

import com.surelogic.NonNull;
import com.surelogic.Singleton;
import com.surelogic.aast.IAASTNode;
import com.surelogic.aast.IAASTRootNode;
import com.surelogic.analysis.IIRProject;
import com.surelogic.common.XUtil;
import com.surelogic.dropsea.IModelingProblemDrop;
import com.surelogic.dropsea.ir.ModelingProblemDrop;
import com.surelogic.dropsea.ir.ProposedPromiseDrop;
import com.surelogic.dropsea.irfree.DiffHeuristics;
import com.surelogic.javac.Projects;

import edu.cmu.cs.fluid.ir.IRNode;
import edu.cmu.cs.fluid.java.DebugUnparser;
import edu.cmu.cs.fluid.java.bind.IBinder;

/**
 * Context object for scrubbing and creation of modeling problem drops.
 * 
 * @author Edwin.Chan
 */
@Singleton
public final class AnnotationScrubberContext {

  private static final AnnotationScrubberContext INSTANCE = new AnnotationScrubberContext();

  @NonNull
  public static AnnotationScrubberContext getInstance() {
    return INSTANCE;
  }

  private AnnotationScrubberContext() {
    // Singleton
  }

  private boolean ignoreNode(IAASTNode n) {
    if (XUtil.useExperimental) {
      return false;
    }
    final IAASTRootNode root = n.getRoot();
    return root.isAutoGenerated();
  }

  public IBinder getBinder(IRNode context) {
    final IIRProject p = Projects.getEnclosingProject(context);
    return p.getTypeEnv().getBinder();
  }

  public ModelingProblemDrop reportModelingProblem(IAASTNode n, int number, Object... args) {
    if (ignoreNode(n)) {
      return null;
    }
    final ModelingProblemDrop d = new ModelingProblemDrop(n.getAnnoContext() != null ? n.getAnnoContext() : n.getPromisedFor(),
        n.getOffset());
    d.setMessage(number, args);
    return d;
  }

  public IModelingProblemDrop reportModelingProblem(final IAASTNode n, final String msgTemplate, final Object... args) {
    return reportError(MessageFormat.format(msgTemplate, args), n);
  }

  public ModelingProblemDrop reportError(String msg, IAASTNode n) {
    if (ignoreNode(n)) {
      return null;
    }
    if (!msg.contains(" on ")) {
      msg = msg + " on " + n;
    }
    final ModelingProblemDrop d = new ModelingProblemDrop(n.getAnnoContext() != null ? n.getAnnoContext() : n.getPromisedFor(),
        n.getOffset());
    d.setMessage(msg);
    return d;
  }

  public IModelingProblemDrop reportModelingProblem(IRNode n, String msgTemplate, Object... args) {
    return reportModelingProblemHelper(n, msgTemplate, args);
  }

  public IModelingProblemDrop reportModelingProblem(IRNode n, int number, Object... args) {
    return reportModelingProblemHelper(n, number, args);
  }

  public IModelingProblemDrop reportModelingProblemAndProposal(ProposedPromiseDrop p, int number, Object... args) {
    ModelingProblemDrop d = reportModelingProblemHelper(p.getNode(), number, args);
    d.addProposal(p);
    return d;
  }

  public ModelingProblemDrop reportModelingProblemAndProposal(ProposedPromiseDrop p, String msgTemplate, Object... args) {
    ModelingProblemDrop d = reportModelingProblemHelper(p.getNode(), msgTemplate, args);
    d.addProposal(p);
    return d;
  }

  private ModelingProblemDrop reportModelingProblemHelper(IRNode n, int number, Object... args) {
    final ModelingProblemDrop d = new ModelingProblemDrop(n, DiffHeuristics.UNKNOWN);
    d.setMessage(number, args);
    return d;
  }

  private ModelingProblemDrop reportModelingProblemHelper(IRNode n, String msgTemplate, Object... args) {
    String txt = MessageFormat.format(msgTemplate, args) + " on " + DebugUnparser.toString(n);
    ModelingProblemDrop d = new ModelingProblemDrop(n, DiffHeuristics.UNKNOWN);
    d.setMessage(txt);
    return d;
  }
}
