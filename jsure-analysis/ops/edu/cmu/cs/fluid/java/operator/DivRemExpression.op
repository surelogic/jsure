# $Header: /cvs/fluid/fluid/ops/edu/cmu/cs/fluid/java/operator/DivRemExpression.op,v 1.4 2006/08/23 08:57:07 boyland Exp $
/*
 * Operator for divide and remainder operations.
 * A special CFG is generated that <i>assumes</i> that the first and second
 * children are the ones to evaluate.
 */
public operator DivRemExpression extends ArithBinopExpression {
  public static IRNode getDivisor(IRNode node) {
    if (!prototype.includes(tree.getOperator(node))) {
      throw new IllegalArgumentException("node not a Div or Rem Expression");
    }
    return tree.getChild(node,1);
  }
  public Expression getDivisor() {
    return (Expression)instantiate(tree.getChild(baseNode,1));
  }

  @Override public Component createComponent(IRNode node) {
    Component comp = new Component(node,1,1,1);
    Subcomponent sub1 =
      new Subcomponent(comp,tree.childLocation(node,0),1,1,1);
    Subcomponent sub2 =
      new Subcomponent(comp,tree.childLocation(node,1),1,1,1);

    ControlNode abruptMerge1 = new Merge();
    ControlNode abruptMerge2 = new Merge();
    ControlNode testDivisor = new ComponentChoice(comp,null);
    ControlNode throwArithmeticException =
      new AddLabel(PrimitiveExceptionLabel.primitiveArithmeticException);

    ControlEdge.connect(comp.getEntryPort(),sub1.getEntryPort());
    ControlEdge.connect(sub1.getNormalExitPort(),sub2.getEntryPort());
    ControlEdge.connect(sub2.getNormalExitPort(),testDivisor);
    ControlEdge.connect(testDivisor,comp.getNormalExitPort());
    ControlEdge.connect(sub1.getAbruptExitPort(),abruptMerge1);
    ControlEdge.connect(sub2.getAbruptExitPort(),abruptMerge1);
    ControlEdge.connect(abruptMerge1,abruptMerge2);
    ControlEdge.connect(testDivisor,throwArithmeticException);
    ControlEdge.connect(throwArithmeticException,abruptMerge2);
    ControlEdge.connect(abruptMerge2,comp.getAbruptExitPort());

    return comp;
  }
}
