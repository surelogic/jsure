# $Header: /cvs/fluid/fluid/ops/edu/cmu/cs/fluid/java/operator/AssignExpression.op,v 1.14 2007/01/14 07:00:31 nbeckman Exp $
/**
 * An AssignExpressionNodes represents what we normally think of as an
 *        assignment. This is in contrast to an AssignmentNode which is the
 *        supertype of several differnt assignment types
 *        (e.g. assignment, post-increment, pre-decrement).
 */
public operator AssignExpression extends AssignmentExpression
{
  syntax {
    op1:Expression "=" op2:Expression
  }

  public IRNode getSource(IRNode node) {
    return getOp2(node);
  }
  public IRNode getTarget(IRNode node) {
    return getOp1(node);
  }

  /** Create the control-flow graph component for
   * an assignment expression.
   */
  @Override public Component createComponent(IRNode node) {
    Component comp = new Component(node,1,1,1);
    Subcomponent sublhs = 
        new Subcomponent(comp,tree.childLocation(node,op1Loc),1,1,1);
    Subcomponent subrhs = 
        new Subcomponent(comp,tree.childLocation(node,op2Loc),1,1,1);
    ControlNode doAssign = new ComponentChoice(comp,null);
    ControlNode throwArrayStoreException =
      new AddLabel(PrimitiveExceptionLabel.primitiveArrayStoreException);
    ControlNode abruptMerge1 = new Merge();
    ControlNode abruptMerge2 = new Merge();

    // normal control flow:
    ControlEdge.connect(comp.getEntryPort(),sublhs.getEntryPort());
    ControlEdge.connect(sublhs.getNormalExitPort(),subrhs.getEntryPort());
    ControlEdge.connect(subrhs.getNormalExitPort(),doAssign);
    ControlEdge.connect(doAssign,comp.getNormalExitPort());
    // connect up all possible abrupt edges.
    ControlEdge.connect(sublhs.getAbruptExitPort(),abruptMerge1);
    ControlEdge.connect(subrhs.getAbruptExitPort(),abruptMerge1);
    ControlEdge.connect(abruptMerge1,abruptMerge2);
    ControlEdge.connect(doAssign,throwArrayStoreException);
    ControlEdge.connect(throwArrayStoreException,abruptMerge2);
    ControlEdge.connect(abruptMerge2,comp.getAbruptExitPort());
    
    return comp;
  }  
}
