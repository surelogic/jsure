#!/usr/local/bin/perl
# $Header: /cvs/fluid/fluid/lib/perl/gen-visitor-classes,v 1.10 2006/01/11 17:48:29 chance Exp $

# Create visitor classes from operators
# Create Java files from operator description files.
# An operator description file is like a Java file with
# two differences: "operator" instead of "class"
# and a special declaration "syntax" that describes the
# structure of nodes with this operator.

$header = "";
$nodetype = "JJNode";
$optype = "Operator";
$sourcedir = ".";
%typetable = ();

while ($arg = shift) {
  if ($arg =~ /^-header=(.*)/) {
    $header = $1;
  } elsif ($arg =~ /^-nodetype=(.*)/) {
    $nodetype = $1;
  } elsif ($arg =~ /^-optype=(.*)/) {
    $optype = $1;
  } elsif ($arg =~ /^-debug=(.*)/) {
    $debug = $1;
  } elsif ($arg =~ /^-source=(.*)/) {
    $sourcedir = $1;
  }
}

@opfiles = glob("$sourcedir/*.op");

open(IACCEPTORFILE,">IAcceptor.java") ||
	die("Could not write IAcceptor.java\n");
print IACCEPTORFILE "// Generated code. Do *NOT* edit!\n";
&copyheader(*IACCEPTORFILE);
print IACCEPTORFILE "public interface IAcceptor {\n";
print IACCEPTORFILE "  public <T> T accept(IRNode node, IVisitor<T> visitor);\n";
print IACCEPTORFILE "}\n";
close(IACCEPTORFILE);

open(IVISITORFILE,">IVisitor.java") ||
    die("Could not write IVisitor.java\n");
print IVISITORFILE "// Generated code.  Do *NOT* edit!\n";
&copyheader(*IVISITORFILE);
print IVISITORFILE "public interface IVisitor<T> {\n";

open(VISITORFILE,">Visitor.java") ||
    die("Could not write Visitor.java\n");
print VISITORFILE "// Generated code.  Do *NOT* edit!\n";
&copyheader(*VISITORFILE);
print VISITORFILE "public abstract class Visitor<T> implements IVisitor<T> {\n";
print VISITORFILE "  // two useful methods\n";
print VISITORFILE "  public T doAccept(IRNode node) {\n";
print VISITORFILE "    return ((IAcceptor)$nodetype.tree.getOperator(node)).accept(node,this);\n";
print VISITORFILE "  }\n\n";
print VISITORFILE "  public void doAcceptForChildren(IRNode node) {\n";
print VISITORFILE "    Iterator enm = $nodetype.tree.children(node);\n";
print VISITORFILE "    while (enm.hasNext()) {\n";
print VISITORFILE "      doAccept((IRNode)enm.next());\n";
print VISITORFILE "    }\n";
print VISITORFILE "  }\n\n";
print VISITORFILE "  public List<T> doAcceptForChildrenWithResults(IRNode node) {\n";
print VISITORFILE "    List<T> results = new ArrayList<T>();\n";
print VISITORFILE "    Iterator enm = $nodetype.tree.children(node);\n";
print VISITORFILE "    while (enm.hasNext()) {\n";
print VISITORFILE "      results.add(doAccept((IRNode)enm.next()));\n";
print VISITORFILE "    }\n";
print VISITORFILE "    return Collections.unmodifiableList(results);\n";
print VISITORFILE "  }\n\n";
print VISITORFILE "  // method called for any operator without a visit method overridden.\n";
print VISITORFILE "  public T visit(IRNode node) { return null; }\n";

foreach $opfile (@opfiles) {
  open(OPFILE,"<".$opfile) || die("Could not read operator file $opfile");
  while (($line = <OPFILE>) && !($line =~ /^[a-z ]*operator/)) {
  }
  if ($line =~ /^([a-z ]*)operator[ \t]*([A-Za-z][A-Za-z0-9_]+)(.*)/) {
    $opname = $2;
    $line = $3;
    @words = split(/\s+/,$line);
    if (($word = &getword()) eq "extends") {
      $superop = &getword();
    } else {
      $superop = "";
    }
  } else {
    die("Badly formed op file: $opfile\n");
  }
  close(OPFILE);

  print IVISITORFILE "  public T visit$opname(IRNode node);\n";
  # $superop = $optype if ($superop eq "");
  print VISITORFILE "  public T visit$opname(IRNode node) {\n";
  print VISITORFILE "    return visit$superop(node);\n";
  print VISITORFILE "  }\n";
}

print IVISITORFILE "}\n";
close(IVISITORFILE);

print VISITORFILE "}\n";
close(VISITORFILE);

sub getword {
  if (@words == 0 || $words[0] =~ m|^//|) {
    $line = <OPFILE> || die ("operator file ended early");
    @words = split(/\s+/,$line);
    &getword;
  } elsif ($words[0] eq "") {
    shift @words;
    &getword;
  } else {
    shift @words;
  }
}

sub copyheader {
  local ($handle) = (@_);
    if ($header ne "") {
      open(HEADERFILE,$header) || die("Could not read header file $header");
      while ($line = <HEADERFILE>) {
	if (!($line =~ m/^#/)) {
	  print $handle $line;
	}
      }
      close(HEADERFILE);
    }  
}
