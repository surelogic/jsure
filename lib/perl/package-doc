#!/usr/local/bin/perl
# $Header: /cvs/fluid/fluid/lib/perl/package-doc,v 1.4 1998/06/22 15:48:06 boyland Exp $

# Insert hand-written package documentation into javadoc generated
# documentation and perform some substitutions.

$DOCHERE="^.(h2|/body).\$";
$OLDDOC="^.!-- .Header";

$FLUIDTOP= $ENV{"FLUIDTOP"};

# currently a driver test program
while ($arg = shift) {
  $package=$arg;
  $path=$package;
  $path =~ s|\.|/|g;
  $docfilename = "$FLUIDTOP/code/$path/doc.html";
  if (open(DOC,$docfilename)) {
    print("Inserting documentation for package $package\n");
    $htmlfilename = "$FLUIDTOP/www/code/Package-$package.html";
    open(HTMLIN,$htmlfilename) || 
      die("Could not find package documentation for $package");
    unlink($htmlfilename);
    open(HTMLOUT,">$htmlfilename");

    &startdoc;
    &insertdoc;
    &enddoc;
  }
}

# Fast-forward through HTMLIN copying to HTMLOUT until we get a line
# that matches $DOCHERE.  If we encounter some old documentation
# we omit from there until we find the place to insert.
# Uses global $savedline.
sub startdoc {
  local ($line,$echo);
  $echo="yes";
  while ($line = <HTMLIN>) {
    if ($line =~ m|$DOCHERE|) {
      $savedline = $line;
      return;
    }
    if ($line =~ m|$OLDDOC|) {
      $echo = 0;
    }
    print HTMLOUT ($line) if ($echo);
  }
  die("Didn't find place to insert documentation for package $package");
}

# copy rest of HTMLIN to HTMLOUT
# after appending $savedline.
sub enddoc {
  local ($line);
  print HTMLOUT ($savedline);
  while ($line = <HTMLIN>) {
    print HTMLOUT ($line);
  }
}

# Read documentation from <DOC> and send substituted documentation 
# <HTMLOUT>. Uses globals $package
sub insertdoc {
  local($line);
  while ($line = <DOC>) {
    while ($line =~ s|\<class\>([A-Za-z0-9]*)\</class\>|<a href="$package.$1.html#_top_"><tt>$1</tt></a>| ||
	   $line =~ s|\<class\>([A-Za-z0-9\.]*)\</class\>|<a href="$1.html#_top_"><tt>$1</tt></a>| ||
	   $line =~ s|\<package\>([A-Za-z0-9\.]*)\</package\>|<a href="Package-$1.html"><tt>$1</tt></a>| ||
	   $line =~ s|\<method\>([A-Za-z0-9]*)\#([^</>]*)\</method\>|<a href="$package.$1.html#$2"><tt>$1.$2</tt></a>| ||
	   $line =~ s|\<method\>([A-Za-z0-9\.]*)\#([^</>]*)\</method\>|<a href="$1.html#$2"><tt>$1.$2</tt></a>|) {
      1;
    }
    print HTMLOUT ($line);
  }
}
