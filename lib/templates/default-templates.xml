<?xml version="1.0" encoding="UTF-8"?>

<templates>
  <!-- Region annotations (@Region, @InRegion, @MapFields) -->
  <template name="@Region" 
            description="New region with default parent" 
            id="edu.cmu.cs.fluid.templates.region" context="javadoc" 
            enabled="true">@Region ${accessMod} ${name}</template>
            
  <template name="@Region" 
            description="New region with explicit parent" 
            id="edu.cmu.cs.fluid.templates.region2" context="javadoc" 
            enabled="true">@Region ${accessMod} ${name} extends ${parentRegion}</template>
  
  <!-- Effects annotations (@Reads, @Writes) -->
  <!-- Lock annotations (@RegionLock, @PolicyLock, @IsLock, @ReturnsLock, @SingleThreaded) -->
  <template name="@RegionLock" 
            description="Lock declaration" 
            id="edu.cmu.cs.fluid.templates.lock" context="javadoc" 
            enabled="true">@RegionLock ${name} is ${lockExpr} protects ${region}</template>
  
  <template name="@RegionLock" 
            description="Lock decl - this protects Instance" 
            id="edu.cmu.cs.fluid.templates.lock.this" context="javadoc" 
            enabled="true">@RegionLock ${name} is this protects Instance</template>
  
  <template name="@RegionLock" 
            description="Lock decl - this protects this' fields" 
            id="edu.cmu.cs.fluid.templates.lock.this.fields" context="javadoc" 
            enabled="true">@Region ${accessMod} ${name}State
   * @Promise "@InRegion ${name}State" for * *
   * @RegionLock ${name}Lock is this protects ${name}State</template>
  
  <template name="@Region" 
            description="Region and corresponding lock decl" 
            id="edu.cmu.cs.fluid.templates.region.lock" context="javadoc" 
            enabled="true">@Region ${accessMod} ${name}State
   * @RegionLock ${name}Lock is ${lockExpr} protects ${name}State</template>
   
  <template name="@Sl.region" 
            description="Region and corresponding lock decl" 
            id="com.surelogic.templates.region.lock" context="javadoc" 
            enabled="true">@Region ${accessMod} ${name}State
   * @RegionLock ${name}Lock is ${lockExpr} protects ${name}State</template>

  <template name="@PolicyLock" 
            description="Policy lock declaration" 
            id="edu.cmu.cs.fluid.templates.policyLock" context="javadoc" 
            enabled="true">@PolicyLock ${name} is ${lockExpr}</template>
  
  <template name="@RequiresLock" 
            description="Caller need to acquire lock" 
            id="edu.cmu.cs.fluid.templates.requiresLock" context="javadoc" 
            enabled="true">@RequiresLock ${lock}</template>
  
    <template name="@RequiresLock" 
            description="Caller need to acquire lock in different class" 
            id="edu.cmu.cs.fluid.templates.requiresLock" context="javadoc" 
            enabled="true">@RequiresLock ${foo}.${Bar}:${lock}</template>
  
  <template name="@SingleThreaded" 
            description="singleThreaded constructor with borrowed this" 
            id="edu.cmu.cs.fluid.templates.singleThreaded.borrowed" context="javadoc" 
            enabled="true">@SingleThreaded
   * @Borrowed this</template>
  
  <template name="@SingleThreaded" 
            description="singleThreaded constructor writing/starting nothing" 
            id="edu.cmu.cs.fluid.templates.singleThreaded.nothing" context="javadoc" 
            enabled="true">@SingleThreaded
   * @Writes nothing
   * @Starts nothing</template>
  
  <!-- Uniqueness annotations -->
  <template name="@Unique" 
            description="Unique and aggregated Object" 
            id="edu.cmu.cs.fluid.templates.unique" context="javadoc" 
            enabled="true">@Unique
   * @Aggregate Instance into ${region}</template>  
  
  <template name="@InRegion" 
            description="Unique and aggregated Object" 
            id="edu.cmu.cs.fluid.templates.mappedObject" context="javadoc" 
            enabled="true">@InRegion ${region}
   * @Unique
   * @Aggregate Instance into ${region}</template>  
  
  <template name="@InRegion" 
            description="Unique and aggregated array" 
            id="edu.cmu.cs.fluid.templates.mappedArray" context="javadoc" 
            enabled="true">@InRegion ${region}
   * @Unique
   * @Aggregate [] into ${region}</template>  
  
  <!-- Color annotations -->
  <!-- Color annotations for AWT -->
  <template name="@Color" 
            description="Color declarations for two incompatible colors" 
            id="edu.cmu.cs.fluid.templates.color.incompatible" context="javadoc" 
            enabled="true">@Color ${c1}, ${c2}
   * @incompatibleColors ${c1}, ${c2}</template>
  
  <template name="@grant" 
            description="Grant color AWT" 
            id="edu.cmu.cs.fluid.templates.grant.AWT" context="java" 
            enabled="true">@grant AWT</template>
  
  <template name="@ColorConstraint" 
            description="Requires AWT or NotYetVisible" 
            id="edu.cmu.cs.fluid.templates.colorConstraint.AWTorNotYetVisible" context="javadoc" 
            enabled="true">@ColorConstraint (AWT | NotYetVisible);</template>
  
  <template name="@ColorConstraint" 
            description="Requires AWT" 
            id="edu.cmu.cs.fluid.templates.colorConstraint.AWT" context="javadoc" 
            enabled="true">@ColorConstraint AWT;</template>

  <template name="@ColorConstraint" 
            description="Requires Compute" 
            id="edu.cmu.cs.fluid.templates.colorConstraint.Compute" context="javadoc" 
            enabled="true">@ColorConstraint Compute;</template>
  
  <template name="@ColorContext" 
            description="Has color AWT or NotYetVisible" 
            id="edu.cmu.cs.fluid.templates.colorContext.AWTorNotYetVisible" context="javadoc" 
            enabled="true">@ColorContext (AWT | NotYetVisible);</template>
  
  <template name="@ColorContext" 
            description="Has color AWT" 
            id="edu.cmu.cs.fluid.templates.colorContext.AWT" context="javadoc" 
            enabled="true">@ColorContext AWT;</template>

  <template name="@ColorContext" 
            description="Has color Compute" 
            id="edu.cmu.cs.fluid.templates.colorContext.Compute" context="javadoc" 
            enabled="true">@ColorContext Compute;</template>  
    
  <!-- Scoped promises -->
  <template name="@Promise" 
            description="Scoped promise" 
            id="edu.cmu.cs.fluid.templates.promise" context="javadoc" 
            enabled="true">@Promise &quot;${promise}&quot; for ${targets}</template>
  
   <template name="@Promise" 
            description="Scoped promise on all fields" 
            id="edu.cmu.cs.fluid.templates.promise.fields" context="javadoc" 
            enabled="true">@Promise &quot;${promise}&quot; for * *</template>
  
  <template name="@Promise" 
            description="Scoped promise on all constructors" 
            id="edu.cmu.cs.fluid.templates.promise.constructors" context="javadoc" 
            enabled="true">@Promise &quot;${promise}&quot; for new(**)</template>
  
  <template name="@Promise" 
            description="Scoped promise on all methods" 
            id="edu.cmu.cs.fluid.templates.promise.methods" context="javadoc" 
            enabled="true">@Promise &quot;${promise}&quot; for *(**)</template>
  
  <template name="@Promise" 
            description="Scoped promise on all methods and constructors" 
            id="edu.cmu.cs.fluid.templates.promise.methods" context="javadoc" 
            enabled="true">@Promise &quot;${promise}&quot; for **(**)</template>
  
  <template name="@Promise" 
            description="singleThreaded/borrowed on the default constructor" 
            id="edu.cmu.cs.fluid.templates.promise.methods" context="javadoc" 
            enabled="true">@Promise &quot;@SingleThreaded&quot; for new()
   * @Promise &quot;@borrowed this&quot; for new()</template>  
  
  <template name="@Assume" 
            description="Assumption on a method in a specific type" 
            id="edu.cmu.cs.fluid.templates.promise.methods" context="javadoc" 
            enabled="true">@Assume &quot;${promise}&quot; for ${package}:${type}:${method}(${args})</template>
  
  <template name="@Assume" 
            description="Assumption on a constructor in a specific type" 
            id="edu.cmu.cs.fluid.templates.promise.methods" context="javadoc" 
            enabled="true">@Assume &quot;${promise}&quot; for ${package}:${type}:new(${args})</template>
  
  <!-- Starts annotations -->
  
  <!-- SubtypedBy annotations -->
  
  <!-- UsedBy annotations -->
  
  <!-- UseTypeWherePossible annotations -->
</templates>
