<package name="java.awt">
	<class name="Component">
		<ThreadRoleImport>java.awt</ThreadRoleImport>
		<Promise>@ThreadRoleTransparent for add*Listener(*)</Promise>
    <Promise>@RegionEffects(writes java.awt.event.ActionListener:GUIinternal) for add*Listener(*)</Promise>
    <Promise>@ThreadRoleTransparent for remove*Listener(*)</Promise>
    <Promise>@RegionEffects(writes java.awt.event.ActionListener:GUIinternal) for remove*Listener(*)</Promise>
	  <Promise>@ThreadRole(AWT) for remove(**) &amp; !(remove*Listener(**))</Promise>
	  <Promise>@RegionEffects(writes Instance, java.awt.event.ActionListener:GUIinternal, java.awt.event.ActionListener:GUIstuff) for remove(*)</Promise>
    <Promise>@ThreadRole(AWT) for set*(**)</Promise>
	  <Promise>@RegionEffects(writes Instance, java.awt.event.ActionListener:GUIinternal, java.awt.event.ActionListener:GUIstuff) for set*(**) &amp; !(setRequestFocusController(*))</Promise>
    <Promise>@ThreadRole(AWT) for is*(**)</Promise>
	  <Promise>@RegionEffects(reads Instance, java.awt.event.ActionListener:GUIstuff) for is*(**) &amp; !(isInstanceOf(**))</Promise>
    <Promise>@ThreadRole(AWT) for get*(**) &amp; !(getSize(**))</Promise> 
	  <Promise>@RegionEffects(reads Instance, java.awt.event.ActionListener:GUIinternal, java.awt.event.ActionListener:GUIstuff) for public get*(**) &amp; !(getSize())</Promise>
	  <Promise>@RegionEffects(reads Instance) for getSize()</Promise>
    <Promise>@ThreadRole(AWT) for create*Image(**)</Promise>
	  <Promise>@RegionEffects(writes Instance, java.awt.event.ActionListener:GUIinternal, java.awt.event.ActionListener:GUIstuff) for create*Image(**)</Promise>

	<Promise>@ThreadRoleTransparent for repaint(**)</Promise>
	  <Promise>@RegionEffects(reads Instance) for repaint(**)</Promise>


    <Promise>@ThreadRole(AWT) for removeNotify()</Promise>
   
 	  <Promise>@ThreadRole(AWT) for *Focus(**) &amp; !(requestFocus*(**))</Promise>
	  <Promise>@RegionEffects(reads Instance, java.awt.event.ActionListener:GUIinternal, java.awt.event.ActionListener:GUIstuff) for *Focus(**)</Promise>

	 	<Promise>@ThreadRole(AWT) for enable*(**) | disable*(**)</Promise>
	  <Promise>@RegionEffects(reads Instance, java.awt.event.ActionListener:GUIinternal, java.awt.event.ActionListener:GUIstuff) for enable*(**) | disable*(**)</Promise>

    <Promise>@ThreadRole(AWT) for validate() | invalidate() | hide()</Promise>
	  <Promise>@RegionEffects(writes Instance, java.awt.event.ActionListener:GUIinternal, java.awt.event.ActionListener:GUIstuff) for validate() | invalidate() | hide()</Promise>

    <Promise>@ThreadRole(AWT) for process*Event(*)</Promise>
	  
	  
    <constructor>
      <starts>nothing</starts>
      <RegionEffects>none</RegionEffects>
      <unique>return</unique>
      <!-- <ThreadRoleTransparent/>  -->
    </constructor>
	  
    <method name="getFont" params="">
    	<borrowed>this</borrowed>
    </method>
    <method name="getFontMetrics" params="java.awt.Font">
    	<borrowed>this</borrowed>
    </method>
    <method name="getToolkit">
    	<borrowed>this</borrowed>
    </method>

    <method name="update" params="java.awt.Graphics">
    	<ThreadRole>AWT</ThreadRole>
    </method>
    <method name="mouseDown" params="java.awt.Event, int, int">
      <ThreadRole>AWT</ThreadRole>
    </method>
    <method name="mouseUp" params="java.awt.Event, int, int">
      <ThreadRole>AWT</ThreadRole>
    </method>
    <method name="paint" params="java.awt.Graphics">
      <ThreadRole>AWT</ThreadRole>
    </method>
    <method name="mouseEnter" params="java.awt.Event, int, int">
    	<ThreadRole>AWT</ThreadRole>
    </method>
    <method name="mouseExit" params="java.awt.Event, int, int">
      <ThreadRole>AWT</ThreadRole>
    </method>
    <method name="mouseDrag" params="java.awt.Event, int, int">
      <ThreadRole>AWT</ThreadRole>
    </method>
    <method name="mouseMove" params="java.awt.Event, int, int">
      <ThreadRole>AWT</ThreadRole>
    </method>
    <method name="repaint" params="">
      <ThreadRoleTransparent/>
      <Reads>Instance</Reads>
    </method>
    <method name="setBackground" params="java.awt.Color">
    	<borrowed>this</borrowed>
    </method>
    <method name="setCursor" params="java.awt.Cursor">
    	<borrowed>this</borrowed>
    </method>
    <method name="setFont" params="java.awt.Font">
    	<borrowed>this</borrowed>
    </method>
   
    </class>  
</package>
