# $Header: /cvs/fluid/fluid/ops/edu/cmu/cs/fluid/java/promise/QualifiedReceiverDeclaration.op,v 1.11 2008/08/21 14:46:59 chance Exp $

/** An explicit declaration of the receiver for outer classes
 * @see MethodDeclaration
 * @see ClassBody
 * @see ConstructorDeclaration
 */
public operator QualifiedReceiverDeclaration implements edu.cmu.cs.fluid.java.bind.IHasType {
  syntax { base:ClassType <> "." <> "this" }

  /** Logger instance for debugging. */
  private static final java.util.logging.Logger LOG =
    java.util.logging.Logger.getLogger("FLUID.promise");
    
  /** Return node declaring class of "outer" receiver.
   * This will be either a ClassDeclaration or an
   * AnonClassExpression node.
   * @see ClassDeclaration
   * @see AnonClassExpression
   */
  public static IRNode getType(IBinder b, IRNode node) {
    IJavaDeclaredType t = getJavaType(b, node);
    final IRNode rv     = t.getDeclaration();
    if (LOG.isLoggable(Level.INFO)) {
      IRNode forNode = JavaPromise.getPromisedFor(node);
      Operator op    = tree.getOperator(forNode);
      IRNode type = null;
      if (op instanceof MethodDeclaration ||
          op instanceof ConstructorDeclaration) {
        assertIsEnclosingType(rv, edu.cmu.cs.fluid.java.util.VisitUtil.getEnclosingType(forNode));
      } else if (op instanceof ClassInitDeclaration) {
        LOG.warning("ClassInitDeclarations nodes shouldn't have receivers");
        assertIsEnclosingType(rv, JavaPromise.getPromisedFor(node));
      } else if (op instanceof InitDeclaration) {
        assertIsEnclosingType(rv, JavaPromise.getPromisedFor(node));
      } else {
        throw new edu.cmu.cs.fluid.FluidError("Illegal use of receiver node promise: "+op);
      }
    }
    return rv;
  }
  
  public static IJavaDeclaredType getJavaType(IBinder b, IRNode node) {
    // Should be the "embedded" type
    IRNode base         = getBase(node);
    IJavaDeclaredType t = bindToType(b.getTypeEnvironment(), base);
    return t;
  }
  
  private static IJavaDeclaredType bindToType(ITypeEnvironment tEnv, IRNode type) {
	  IJavaDeclaredType base = null;
	  IRNode decl; 
    if (TypeRef.prototype.includes(type)) {
      String name = TypeRef.getId(type);
      base = bindToType(tEnv, TypeRef.getBase(type));
      IRNode baseDecl = base.getDeclaration();
      if (name.startsWith(edu.cmu.cs.fluid.java.adapter.AbstractAdapter.ACE_Prefix)) {
    	  decl = edu.cmu.cs.fluid.java.util.BindUtil.findAnonClass(baseDecl, name);
      } else {
    	  decl = edu.cmu.cs.fluid.java.util.BindUtil.findInnerType(baseDecl, name);
      }
    } else {
      String name = NamedType.getType(type);
      if (name.startsWith(edu.cmu.cs.fluid.java.adapter.AbstractAdapter.ACE_Prefix)) {
        IRNode cu = edu.cmu.cs.fluid.java.util.VisitUtil.getEnclosingCompilationUnit(type);
    	  decl = edu.cmu.cs.fluid.java.util.BindUtil.findAnonClass(cu, name);
      } else {
        decl = tEnv.findNamedType(name);
      }
    } 
    if (decl == null) {
      throw new NullPointerException();
    }
    return JavaTypeFactory.getMyThisType(decl);
  }
  
  private static void assertIsEnclosingType(IRNode enclosing, IRNode start) {
    IRNode here = start;
    while (here != null) {
      if (here.equals(enclosing)) {
        return;
      }
      here = edu.cmu.cs.fluid.java.util.VisitUtil.getEnclosingType(here);
    }
    LOG.severe(DebugUnparser.toString(enclosing)+" does not enclose "+DebugUnparser.toString(start));
    return;
  }
  
  public static IRNode getReceiverNode(IRNode methodNode, IRNode type) {
    IRNode node = JavaPromise.getQualifiedReceiverNodeByName(methodNode, type);
    if (node != null) {
      return node;
    }
    final Operator op = tree.getOperator(methodNode);
    if (!(op instanceof NestedDeclInterface)) {
      // Check if in a nested/anon class
      IRNode enclosingT = edu.cmu.cs.fluid.java.util.VisitUtil.getEnclosingType(methodNode);
      Operator top      = tree.getOperator(enclosingT);
      if (!(top instanceof NestedDeclInterface)) {
        throw new edu.cmu.cs.fluid.FluidRuntimeException("Not a nested type: "+top.name());    
      }
    }   
    if (op instanceof IHasReceiverDecl) {
      return makeReceiverNode(methodNode, type);
    }
    else if (SomeFunctionDeclaration.prototype.includes(op)) {
      if (JavaNode.getModifier(methodNode,JavaNode.STATIC)) {
        throw new edu.cmu.cs.fluid.FluidRuntimeException("static methods have no receiver");
      }
      return makeReceiverNode(methodNode, type);
    }
    throw new edu.cmu.cs.fluid.FluidRuntimeException("No receiver on "+op.name());    
  }

  private static IRNode makeReceiverNode(IRNode methodNode, IRNode type) {
    IRNode t    = edu.cmu.cs.fluid.java.util.CogenUtil.makeCorrespondingTypeRef(type);
    IRNode node = JavaPromise.makeJavaPromise(prototype, new IRNode[] { t });
    JavaPromise.setQualifiedReceiverNode(methodNode, node);
    return node;
  }
}
