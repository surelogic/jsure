# $Header: /cvs/fluid/fluid/ops/edu/cmu/cs/fluid/java/promise/ReceiverDeclaration.op,v 1.21 2008/05/14 19:04:50 aarong Exp $

/** An explicit declaration of the receiver 
 * @see MethodDeclaration
 * @see ClassBody
 * @see ConstructorDeclaration
 */
public operator ReceiverDeclaration implements edu.cmu.cs.fluid.java.bind.IHasType {
  syntax { "this" }
  /** Logger instance for debugging. */
  private static final java.util.logging.Logger LOG =
    java.util.logging.Logger.getLogger("FLUID.promise");
  /** Return node declaring class of receiver.
   * This will be either a ClassDeclaration or an
   * AnonClassExpression node.
   * @see ClassDeclaration
   * @see AnonClassExpression
   */
  public static IRNode getType(IRNode node) {
    IRNode forNode = JavaPromise.getPromisedFor(node);
    Operator op    = tree.getOperator(forNode);
    if (op instanceof MethodDeclaration ||
        op instanceof ConstructorDeclaration) {
      return edu.cmu.cs.fluid.java.util.VisitUtil.getEnclosingType(forNode);
    } else if (op instanceof ClassInitDeclaration) {
      LOG.warning("ClassInitDeclarations nodes shouldn't have receivers");
      return JavaPromise.getPromisedFor(node);
    } else if (op instanceof InitDeclaration) {
      return JavaPromise.getPromisedFor(node);
    }
    throw new edu.cmu.cs.fluid.FluidError("Illegal use of receiver node promise");
  }
  public static IRNode getReceiverNode(IRNode declNode) {
    IRNode node = JavaPromise.getReceiverNodeOrNull(declNode);
    if (node != null) {
      return node;
    }
    Operator op = tree.getOperator(declNode);
    if (op instanceof IHasReceiverDecl) {
      return makeReceiverNode(declNode);
    }
    else if (SomeFunctionDeclaration.prototype.includes(op)) {
      if (JavaNode.getModifier(declNode,JavaNode.STATIC)) {
        throw new edu.cmu.cs.fluid.FluidRuntimeException("static "+op.name()+"s have no receiver");
      }
      return makeReceiverNode(declNode);
    }
    throw new edu.cmu.cs.fluid.FluidRuntimeException("No receiver on "+op.name());    
  }
  private static IRNode makeReceiverNode(IRNode declNode) {
    IRNode node = JavaPromise.makeJavaPromise(prototype);
    JavaPromise.setReceiverNode(declNode,node);
    return node;
  }
}
