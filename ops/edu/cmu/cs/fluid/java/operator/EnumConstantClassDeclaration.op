# $Header: /cvs/fluid/fluid/ops/edu/cmu/cs/fluid/java/operator/EnumConstantClassDeclaration.op,v 1.2 2007/05/14 21:36:57 chance Exp $
public operator EnumConstantClassDeclaration extends EnumConstantDeclaration implements NestedDeclInterface, FlowUnit
{
  syntax { 
    $id:Info args:OptArguments body:ClassBody
  }
  properties {
    binding=Variable
    bindsToType=Type 
  }  
  
  @Override public Component createComponent(IRNode node) {
    /* "A(1,2,3) { ... }" is the same as 
     * "public static final E A = new E(1,2,3) { ... }" where E is the
     * enum type containing the declaration.  So we build the same
     * control-flow structure as an Anonymous class expression.
     */
    Component comp = new Component(node,1,1,1);
    
    /* First we create a flow graph for executing the anonymous class
     * expression as an object allocation expression that executes
     * constructors, etc.
     */
     
    /* AnonClassExpression has NewExpression as a child.  We don't have that
     * here, so we have to explicitly create the flow graph for
     * a NewExpression.
     */ 
    Subcomponent argsSub = new Subcomponent(comp,tree.childLocation(node,argsLoc),1,1,1);

    ControlNode doAlloc = new ComponentFlow(comp,NewExpression.prototype);
    ControlNode doCall = new ComponentChoice(comp,NewExpression.prototype);
    ControlNode propagateExceptionsNewExpression = new AddLabel(ExceptionLabel.prototype);
    ControlNode abruptMergeNewExpression = new Merge();

    // ControlEdge.connect(comp.getEntryPort(),doAlloc);
    ControlEdge.connect(doAlloc,argsSub.getEntryPort());
    ControlEdge.connect(argsSub.getNormalExitPort(),doCall);
    // ControlEdge.connect(doCall,comp.getNormalExitPort());
    ControlEdge.connect(argsSub.getAbruptExitPort(),abruptMergeNewExpression);
    // Do this below because we have to add the normal exit path before the exceptional one!
//    ControlEdge.connect(doCall,propagateExceptionsNewExpression);  
    ControlEdge.connect(propagateExceptionsNewExpression,abruptMergeNewExpression);
    // ControlEdge.connect(abruptMergeNewExpression,comp.getAbruptExitPort());
    
    /* Now build graph around the New Expression */    
    ControlNode doClose = new ComponentFlow(comp,null);
    // doInit calls the class initializer
    ControlNode doInit = new ComponentChoice(comp,SuperExpression.prototype);
    ControlNode propagateExceptions = new AddLabel(ExceptionLabel.prototype);
    ControlNode abruptMerge = new Merge();

    ControlEdge.connect(comp.getEntryPort(),doClose);
    ControlEdge.connect(doClose, doAlloc);
    ControlEdge.connect(doCall,doInit);
    ControlEdge.connect(doCall,propagateExceptionsNewExpression); // *
    ControlEdge.connect(doInit,comp.getNormalExitPort());
    ControlEdge.connect(abruptMergeNewExpression,abruptMerge);
    ControlEdge.connect(doInit,propagateExceptions);
    ControlEdge.connect(propagateExceptions,abruptMerge);
    ControlEdge.connect(abruptMerge,comp.getAbruptExitPort());
    
    /* doClose: NB: when looking at reads of (final) variables,
     * it is necessary to check the nested class body for uses.
     */


    /* Next we create a second flow graph for treating the anonymous
     * class declaration as a flow unit.  This is identical to what
     * we do for ClassDeclaration.
     */

    /* the class body executes the static initializer */
    Subcomponent sub = new Subcomponent(comp,tree.childLocation(node,bodyLoc),1,1,1);
    ControlNode startNode = new ComponentSource(comp,null);
    ControlNode endNode = new ComponentSink(comp,Boolean.TRUE);
    ControlNode abruptNode = new ComponentSink(comp,Boolean.FALSE);

    ControlEdge.connect(startNode,sub.getEntryPort());
    ControlEdge.connect(sub.getNormalExitPort(),endNode);
    ControlEdge.connect(sub.getAbruptExitPort(),abruptNode);

    return comp;
  }

  public Source getSource(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentEntryPort)sub.getEntryPort()).getInput();
    return (Source)e.getSource();
  }
  public Sink getNormalSink(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentNormalExitPort)sub.getNormalExitPort()).getOutput();
    return (Sink)e.getSink();
  }
  public Sink getAbruptSink(IRNode node) {
    Component comp = JavaComponentFactory.prototype.getComponent(node);
    Subcomponent sub = comp.getSubcomponent(tree.childLocation(node,bodyLoc));
    ControlEdge e = ((SubcomponentAbruptExitPort)sub.getAbruptExitPort()).getOutput();
    return (Sink)e.getSink();
  }
}
